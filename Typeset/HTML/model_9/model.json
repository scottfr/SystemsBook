[{"title":"Numerical Solution Algorithms", "description": "This model explores the selection of the simulation step size and differential equation solution algorithm."},{"geometry":{"x":390,"y":330,"width":100,"height":40},"name":"Population","create":"Stock"},{"attribute":"InitialValue","target":"Population","value":"100"},{"geometry":{"x":0,"y":0,"width":100,"height":100,"sourcePoint":{"x":440,"y":110},"targetPoint":{"x":0,"y":100}},"alpha":null,"omega":"Population","name":"Net Growth","create":"Flow"},{"geometry":{"x":590,"y":120,"width":120,"height":50},"name":"Growth Rate","create":"Variable"},{"attribute":"Equation","target":"Growth Rate","value":"0.1"},{"geometry":{"x":0,"y":0,"width":100,"height":100},"alpha":"Growth Rate","omega":"Net Growth","create":"Link"},{"attribute":"FlowRate","target":"Net Growth","value":"[Growth Rate]*[Population]"},{"geometry":{"x":590,"y":320,"width":120,"height":50},"name":"True Population","create":"Variable"},{"geometry":{"x":0,"y":0,"width":100,"height":100},"alpha":"Growth Rate","omega":"True Population","create":"Link"},{"attribute":"Equation","target":"True Population","value":"100*Exp([Growth Rate]*Years)"},{"attribute":"TimeLength","value":"10"},"DIAGRAM","Let's now implement the simple exponential growth model we have discussed in this chapter. We have a population that starts with 100 people and increases at a rate of 10% per year. In addition to creating the stock and flow model, we have also created a variable, [True Population], that contains the analytical solution to the model.","First, we'll use Euler's method with a step size of 2 years and simulate the model.",{"attribute":"TimeStep","value":"2"},"RESULTS","As we can see these results aren't very accurate. The value of the numerical estimated [Population] is quite different from the analytically determined value in [True Population]. Let's reduce the step size to 1 year and try again.",{"attribute":"TimeStep","value":"1"},"RESULTS","This is better, but we're still off by a fair amount. We could experiment with continuing to reduce the step size, but let's instead switch now to the more accurate Runge-Kutta method. Will simulate the model again with a step size of 1 using the 4th-Order Runge-Kutta solution algorithm.",{"attribute":"SolutionAlgorithm","value":"RK4"},"RESULTS","That's a lot better! It's so close to being perfect that we canâ€™t even see the difference between the two lines in the figure. Just to be clear, let's see how quickly the results degrade when we increase the step size. Let's set the step size to 10 and simulate the model again.",{"attribute":"TimeStep","value":"10"},"RESULTS","That's still very good and much better than Euler's Method with a step size of 1. Why don't you go ahead now and experiment with different step sizes and the two solution methods to get a feel for their accuracies."]